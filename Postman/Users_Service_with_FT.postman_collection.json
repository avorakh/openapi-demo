{
	"info": {
		"_postman_id": "5d5a2b44-0da2-4d33-9790-9382789d0c00",
		"name": "Users Service with FT",
		"description": "User Service provides access to the management system on user data.\n\nContact Support:\n Name: Alisksandr Vorakh\n Email: aliaksandrvorakh@gmail.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "{user Id}",
					"item": [
						{
							"name": "Retrieve a user.",
							"item": [
								{
									"name": "Retrieve a user - Successfull response",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'id' field exist\", function () {",
													"    pm.expect(jsonData.id).to.be.exist;",
													"});",
													"",
													"pm.test(\"The 'email' field exist\", function () {",
													"    pm.expect(jsonData.email).to.be.exist;",
													"});",
													"",
													"pm.test(\"The 'password' field exist\", function () {",
													"    pm.expect(jsonData.password).to.be.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve "
												}
											]
										},
										"description": "Retrieve a user."
									},
									"response": [
										{
											"name": "Successfull response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": {{userId}},\n  \"email\": \"test@example.com\",\n  \"password\": \"Password123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\",\n  \"mfa\": false,\n  \"role\": \"ADMIN\",\n  \"subscription\": {\n    \"type\": \"PREMIUM\",\n    \"isTimeLimited\": true,\n    \"expiredIn\": \"2021-08-24T14:15:22.22Z\"\n  }\n}"
										}
									]
								},
								{
									"name": "Retrieve a user - Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field is 1100\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1100);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'User does not find'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('User does not find');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1100\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1100');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'User does not find'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('User does not find');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "10",
													"description": "(Required) The id of the pet to retrieve "
												}
											]
										},
										"description": "Retrieve a user."
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1100",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "User does not find",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1100,\n  \"message\": \"User does not find\"\n}"
										}
									]
								},
								{
									"name": "Retrieve a user - Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field  is 1000\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1000);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Validation error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Validation error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1000\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1000');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Validation error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Validation error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "a",
													"description": "(Required) The id of the pet to retrieve "
												}
											]
										},
										"description": "Retrieve a user."
									},
									"response": [
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "a",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1000",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Validation error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1000,\n  \"message\": \"Validation error\"\n}"
										}
									]
								},
								{
									"name": "Retrieve a user - Unauthorized (Authorisation Error)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field is 1001\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1001);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Authorisation Error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Authorisation Error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1001\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1001');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Authorisation Error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Authorisation Error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve "
												}
											]
										},
										"description": "Retrieve a user."
									},
									"response": [
										{
											"name": "Unauthorized (Authorisation Error)",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1001",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Authorisation Error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1001,\n  \"message\": \"Authorisation Error\"\n}"
										}
									]
								},
								{
									"name": "Retrieve a user - Internal Server Error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field  is 2000\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(2000);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Internal Error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Internal Error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 2000\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('2000');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Internal Error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Internal Error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "500",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve "
												}
											]
										},
										"description": "Retrieve a user."
									},
									"response": [
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "2000",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Internal Error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 2000,\n  \"message\": \"Internal Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Delete a user.",
							"item": [
								{
									"name": "Delete a user - No Content (Successful deletion)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Delete a user."
									},
									"response": [
										{
											"name": "No Content (Successful deletion)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a user - Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field  is 1000\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1000);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Validation error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Validation error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1000\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1000');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Validation error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Validation error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "aa",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Delete a user."
									},
									"response": [
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1000",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Validation error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1000,\n  \"message\": \"Validation error\"\n}"
										}
									]
								},
								{
									"name": "Delete a user - Unauthorized (Authorisation Error)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field is 1001\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1001);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Authorisation Error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Authorisation Error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1001\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1001');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Authorisation Error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Authorisation Error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Delete a user."
									},
									"response": [
										{
											"name": "Unauthorized (Authorisation Error)",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1001",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Authorisation Error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1001,\n  \"message\": \"Authorisation Error\"\n}"
										}
									]
								},
								{
									"name": "Delete a user - Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field is 1100\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1100);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'User does not find'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('User does not find');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1100\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1100');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'User does not find'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('User does not find');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "9",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Delete a user."
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1100",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "User does not find",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1100,\n  \"message\": \"User does not find\"\n}"
										}
									]
								},
								{
									"name": "Delete a user - Internal Server Error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field  is 2000\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(2000);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Internal Error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Internal Error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 2000\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('2000');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Internal Error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Internal Error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "500",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Delete a user."
									},
									"response": [
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "2000",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Internal Error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 2000,\n  \"message\": \"Internal Error\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Update a user",
							"item": [
								{
									"name": "Update a user - No Content (Successful updating)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"laboris enim\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Update a user"
									},
									"response": [
										{
											"name": "No Content (Successful updating)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a user - Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field  is 1000\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1000);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Validation error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Validation error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1000\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1000');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Validation error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Validation error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"laboris enim\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "da",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Update a user"
									},
									"response": [
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1000",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Validation error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1000,\n  \"message\": \"Validation error\"\n}"
										}
									]
								},
								{
									"name": "Update a user - Unauthorized (Authorisation Error)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field is 1001\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1001);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Authorisation Error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Authorisation Error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1001\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1001');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Authorisation Error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Authorisation Error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"laboris enim\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Update a user"
									},
									"response": [
										{
											"name": "Unauthorized (Authorisation Error)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1001",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Authorisation Error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1001,\n  \"message\": \"Authorisation Error\"\n}"
										}
									]
								},
								{
									"name": "Update a user - Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field is 1100\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(1100);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'User does not find'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('User does not find');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 1100\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1100');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'User does not find'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('User does not find');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "200",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"laboris enim\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "8",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Update a user"
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "1100",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "User does not find",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 1100,\n  \"message\": \"User does not find\"\n}"
										}
									]
								},
								{
									"name": "Update a user - Internal Server Error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"The 'code' field  is 2000\", function () {",
													"    pm.expect(jsonData.code).to.be.eql(2000);",
													"})",
													"",
													"pm.test(\"The 'message' field is 'Internal Error'\", function () {",
													"    pm.expect(jsonData.message).to.be.eql('Internal Error');",
													"})",
													"",
													"pm.test(\"X-ERROR-CODE header is 2000\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('2000');",
													"});",
													"",
													"pm.test(\"X-ERROR-MESSAGE header is 'Internal Error'\", () => {",
													"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Internal Error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
												"key": "X-ACCESS-TOKEN",
												"value": "SomeJWTToken"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-mock-response-code",
												"value": "500",
												"description": "Supported values: 200, 400, 401,404,500",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"laboris enim\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) The id of the pet to retrieve"
												}
											]
										},
										"description": "Update a user"
									},
									"response": [
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "API-KEY",
														"value": "{{apiKey}}"
													},
													{
														"description": "(Required) A token that you provide when making API calls for a user.  Include the token in a header parameter called X-ACCESS-TOKEN.",
														"key": "X-ACCESS-TOKEN",
														"value": "SomeJWTToken"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"role\": \"ADMIN\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}",
															"description": "(Required) The id of the pet to retrieve"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-ERROR-CODE",
													"value": "2000",
													"description": "Error code header"
												},
												{
													"key": "X-ERROR-MESSAGE",
													"value": "Internal Error",
													"description": "Error message header"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 2000,\n  \"message\": \"Internal Error\"\n}"
										}
									]
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create a new user",
					"item": [
						{
							"name": "Create a new user - Successfull response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											"pm.test(\"The 'id' field exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "200",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"{{$randomCountryCode}}\",\n  \"role\": \"ADMIN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Create a new user."
							},
							"response": [
								{
									"name": "Successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"{{$randomCountryCode}}\",\n  \"role\": \"ADMIN\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 10\n}"
								}
							]
						},
						{
							"name": "Create a new user - Unauthorized (Authorisation Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"The 'code' field is 1001\", function () {",
											"    pm.expect(jsonData.code).to.be.eql(1001);",
											"})",
											"",
											"pm.test(\"The 'message' field is 'Authorisation Error'\", function () {",
											"    pm.expect(jsonData.message).to.be.eql('Authorisation Error');",
											"})",
											"",
											"pm.test(\"X-ERROR-CODE header is 1001\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1001');",
											"});",
											"",
											"pm.test(\"X-ERROR-MESSAGE header is 'Authorisation Error'\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Authorisation Error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "200",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"{{$randomCountryCode}}\",\n  \"role\": \"ADMIN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Create a new user."
							},
							"response": [
								{
									"name": "Unauthorized (Authorisation Error)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"041@example.com\",\n  \"password\": \"papasswordword\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\",\n  \"role\": \"ADMIN\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-ERROR-CODE",
											"value": "1001",
											"description": "Error code header"
										},
										{
											"key": "X-ERROR-MESSAGE",
											"value": "Authorisation Error",
											"description": "Error message header"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 1001,\n  \"message\": \"Authorisation Error\"\n}"
								}
							]
						},
						{
							"name": "Create a new user - Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"The 'code' field  is 1000\", function () {",
											"    pm.expect(jsonData.code).to.be.eql(1000);",
											"})",
											"",
											"pm.test(\"The 'message' field is 'Validation error'\", function () {",
											"    pm.expect(jsonData.message).to.be.eql('Validation error');",
											"})",
											"",
											"pm.test(\"X-ERROR-CODE header is 1000\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1000');",
											"});",
											"",
											"pm.test(\"X-ERROR-MESSAGE header is 'Validation error'\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Validation error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "API-KEY",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "x-mock-response-code",
										"value": "200",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"{{$randomCountryCode}}\",\n  \"role\": \"ADMIN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Create a new user."
							},
							"response": [
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"bad@example\",\n    \"password\": \"a\",\n    \"role\": \"ADMIN\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-ERROR-CODE",
											"value": "1000",
											"description": "Error code header"
										},
										{
											"key": "X-ERROR-MESSAGE",
											"value": "Validation error",
											"description": "Error message header"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 1000,\n  \"message\": \"Validation error\"\n}"
								}
							]
						},
						{
							"name": "Create a new user - Internal Server Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"The 'code' field  is 2000\", function () {",
											"    pm.expect(jsonData.code).to.be.eql(2000);",
											"})",
											"",
											"pm.test(\"The 'message' field is 'Internal Error'\", function () {",
											"    pm.expect(jsonData.message).to.be.eql('Internal Error');",
											"})",
											"",
											"pm.test(\"X-ERROR-CODE header is 2000\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('2000');",
											"});",
											"",
											"pm.test(\"X-ERROR-MESSAGE header is 'Internal Error'\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Internal Error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "500",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"{{$randomCountryCode}}\",\n  \"role\": \"ADMIN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Create a new user."
							},
							"response": [
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"internal@example.com\",\n  \"password\": \"pa$$word\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"countryIsoCode\": \"US\",\n  \"role\": \"ADMIN\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-ERROR-CODE",
											"value": "2000",
											"description": "Error code header"
										},
										{
											"key": "X-ERROR-MESSAGE",
											"value": "Internal Error",
											"description": "Error message header"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 2000,\n  \"message\": \"Internal Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Retrieve users",
					"item": [
						{
							"name": "Retrieve users - List of users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function checkUser(user) {",
											"    pm.test(\"The 'id' field exist\", function () {",
											"        pm.expect(user.id).to.be.exist;",
											"    });",
											"",
											"    pm.test(\"The 'email' field exist\", function () {",
											"        pm.expect(user.email).to.be.exist;",
											"    });",
											"",
											"    pm.test(\"The 'password' field exist\", function () {",
											"        pm.expect(user.password).to.be.exist;",
											"    });",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test user array\", () => {",
											"    pm.expect(jsonData).to.have.length(1)",
											"",
											"});",
											"",
											"jsonData.forEach(user => checkUser(user));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "403",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?limit=66",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "66",
											"description": "How many items to return at one time (max 100)"
										}
									]
								},
								"description": "List all users."
							},
							"response": [
								{
									"name": "List of users",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?limit=66",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "limit",
													"value": "66"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": 11,\n    \"email\": \"email@example.com\",\n    \"password\": \"SomeSectet\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"countryIsoCode\": \"US\",\n    \"mfa\": true,\n    \"role\": \"ADMIN\",\n    \"subscription\": {\n      \"type\": \"PREMIUM\",\n      \"isTimeLimited\": true,\n      \"expiredIn\": \"2021-08-24T14:15:22.22Z\"\n    }\n  },\n  {\n    \"id\": 12,\n    \"email\": \"email@example.com\",\n    \"password\": \"Secret\",\n    \"firstName\": \"Jeck\",\n    \"lastName\": \"Smith\",\n    \"countryIsoCode\": \"US\",\n    \"mfa\": false,\n    \"role\": \"USER\",\n    \"subscription\": {\n      \"type\": \"FREE\",\n      \"isTimeLimited\": false\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "Retrieve users - Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"The 'code' field  is 1000\", function () {",
											"    pm.expect(jsonData.code).to.be.eql(1000);",
											"})",
											"",
											"pm.test(\"The 'message' field is 'Validation error'\", function () {",
											"    pm.expect(jsonData.message).to.be.eql('Validation error');",
											"})",
											"",
											"pm.test(\"X-ERROR-CODE header is 1000\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1000');",
											"});",
											"",
											"pm.test(\"X-ERROR-MESSAGE header is 'Validation error'\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Validation error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "403",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?limit=101",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "101",
											"description": "How many items to return at one time (max 100)"
										}
									]
								},
								"description": "List all users."
							},
							"response": [
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?limit=101",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "limit",
													"value": "101"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-ERROR-CODE",
											"value": "1000",
											"description": "Error code header"
										},
										{
											"key": "X-ERROR-MESSAGE",
											"value": "Validation error",
											"description": "Error message header"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 1000,\n  \"message\": \"Validation error\"\n}"
								}
							]
						},
						{
							"name": "Retrieve users - Unauthorized (Authorisation Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"The 'code' field is 1001\", function () {",
											"    pm.expect(jsonData.code).to.be.eql(1001);",
											"})",
											"",
											"pm.test(\"The 'message' field is 'Authorisation Error'\", function () {",
											"    pm.expect(jsonData.message).to.be.eql('Authorisation Error');",
											"})",
											"",
											"pm.test(\"X-ERROR-CODE header is 1001\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('1001');",
											"});",
											"",
											"pm.test(\"X-ERROR-MESSAGE header is 'Authorisation Error'\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Authorisation Error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "403",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?limit=66",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "66",
											"description": "How many items to return at one time (max 100)"
										}
									]
								},
								"description": "List all users."
							},
							"response": [
								{
									"name": "Unauthorized (Authorisation Error)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?limit=66",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "limit",
													"value": "66"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-ERROR-CODE",
											"value": "1001",
											"description": "Error code header"
										},
										{
											"key": "X-ERROR-MESSAGE",
											"value": "Authorisation Error",
											"description": "Error message header"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 1001,\n  \"message\": \"Authorisation Error\"\n}"
								}
							]
						},
						{
							"name": "Retrieve users - Internal Server Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"The 'code' field  is 2000\", function () {",
											"    pm.expect(jsonData.code).to.be.eql(2000);",
											"})",
											"",
											"pm.test(\"The 'message' field is 'Internal Error'\", function () {",
											"    pm.expect(jsonData.message).to.be.eql('Internal Error');",
											"})",
											"",
											"pm.test(\"X-ERROR-CODE header is 2000\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-CODE')).to.eql('2000');",
											"});",
											"",
											"pm.test(\"X-ERROR-MESSAGE header is 'Internal Error'\", () => {",
											"  pm.expect(pm.response.headers.get('X-ERROR-MESSAGE')).to.eql('Internal Error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "500",
										"description": "Supported values: 200, 400, 401, 500",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "66",
											"description": "How many items to return at one time (max 100)",
											"disabled": true
										}
									]
								},
								"description": "List all users."
							},
							"response": [
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "API-KEY",
												"value": "{{apiKey}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?limit=66",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "limit",
													"value": "66"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-ERROR-CODE",
											"value": "2000",
											"description": "Error code header"
										},
										{
											"key": "X-ERROR-MESSAGE",
											"value": "Internal Error",
											"description": "Error message header"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 2000,\n  \"message\": \"Internal Error\"\n}"
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8088",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "DEMO-API-KEY",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "12",
			"type": "string"
		}
	]
}